##Transact-SQL es una variante mejorada de SQL estandar para las necesidades de Microsoft o Oracle con PL-SQL las cuales implementan la capacidad de usar programación y esto facilita la programación de stored procedures y triggers
##Son bases de datos que estan muy arraigadas y demandadas en el mundo empresarial por lo que es conveniente aprenderlas y al aprender una ya aprendes por defecto SQL debido a que se basan en este

CREATE TABLE SPECIALITY(
    ID_SPECIALITY INT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(50) NOT NULL,
    PRIMARY KEY(ID_SPECIALITY)
);

##ESTA TABLA SE NORMALIZA DESPUES EN DOS TABLAS COURSE_NUMBER(EL NUMERO) Y COURSE_LETTER(LA LETRA) YA QUE ESTA TABLA ES EL RESULTADO DE LA CARDINALIDAD N:N ENTRE ESAS DOS
CREATE TABLE COURSE (
    ID_COURSE INT NOT NULL AUTO_INCREMENT,
    LEVEL VARCHAR(4) NOT NULL,    
    PRIMARY KEY(ID_COURSE)
);

CREATE TABLE STUDENT (
    ID_STUDENT INT NOT NULL AUTO_INCREMENT,
    RUT_STUDENT VARCHAR(10) NOT NULL,
    NAME_STUDENT VARCHAR(50) NOT NULL,
    LAST_NAME_STUDENT VARCHAR(50) NOT NULL,
    ID_COURSE_FK INT NOT NULL,
    PRIMARY KEY(ID_STUDENT),
    CONSTRAINT STUDENT_COURSE_FK FOREIGN KEY(ID_COURSE_FK) REFERENCES COURSE(ID_COURSE)
);

CREATE TABLE TEACHER (
    ID_TEACHER INT NOT NULL AUTO_INCREMENT,
    RUT_TEACHER VARCHAR(10) NOT NULL,
    NAME_TEACHER VARCHAR(50) NOT NULL,
    LAST_NAME_TEACHER VARCHAR(50) NOT NULL,
    PRIMARY KEY(ID_TEACHER)
);

CREATE TABLE USER(
    ID_USER INT NOT NULL AUTO_INCREMENT,
    USER_EMAIL VARCHAR(180) NOT NULL,
    USER_PASSWORD VARCHAR(255) NOT NULL,
    ID_STUDENT_FK INT,
    ID_TEACHER_FK INT,
    PRIMARY KEY(ID_USER),
    CONSTRAINT STUDENT_USER_FK FOREIGN KEY(ID_STUDENT_FK) REFERENCES STUDENT(ID_STUDENT),
    CONSTRAINT TEACHER_USER_FK FOREIGN KEY(ID_TEACHER_FK) REFERENCES TEACHER(ID_TEACHER)
);

CREATE TABLE SUBJECT (
    ID_SUBJECT INT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(60) NOT NULL,
    ID_SPECIALITY_FK INT NOT NULL,
    PRIMARY KEY(ID_SUBJECT),
    CONSTRAINT SPECIALITY_SUBJECT_FK FOREIGN KEY(ID_SPECIALITY_FK) REFERENCES SPECIALITY(ID_SPECIALITY)
);

CREATE TABLE SCHEDULE (
    ID_COURSE INT NOT NULL,
    ID_SUBJECT_FK INT NOT NULL,
    ID_TEACHER_FK INT NOT NULL,
    SCHEDULE_DAY VARCHAR(10) NOT NULL,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    PRIMARY KEY(ID_COURSE),
    CONSTRAINT COURSE_SCHEDULE_PK FOREIGN KEY(ID_COURSE) REFERENCES COURSE(ID_COURSE),
    CONSTRAINT SUBJECT_SCHEDULE_FK FOREIGN KEY(ID_SUBJECT_FK) REFERENCES SUBJECT(ID_SUBJECT),
    CONSTRAINT TEACHER_SCHEDULE_FK FOREIGN KEY(ID_TEACHER_FK) REFERENCES TEACHER(ID_TEACHER)
);


##LAS RESERVACIONES SE HACEN POR HORA EN UN MISMO DIA
##EL SERVIDOR O ALGO TENDRIA QUE ESTAR OBSERVANDO CONSTANTEMENTE LOS REGISTROS QUE SU HORA DE FINALIZACIÓN YA HAYA SIDO ALCANZADA O EXCEDIDA PARA ASI QUITAR LA RESERVACIÓN Y DAR AVISO
CREATE TABLE ROOM (
    ID_ROOM INT NOT NULL AUTO_INCREMENT,
    NAME_ROOM VARCHAR(80) NOT NULL,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    ID_RESERVING_TEACHER INT NOT NULL,
    ID_OCCUPANT_COURSE INT NOT NULL,
    PRIMARY KEY(ID_ROOM),
    CONSTRAINT RESERVING_TEACHER_FK FOREIGN KEY(ID_RESERVING_TEACHER) REFERENCES TEACHER(ID_TEACHER),
    CONSTRAINT OCCUPANT_COURSE FOREIGN KEY(ID_OCCUPANT_COURSE) REFERENCES COURSE(ID_COURSE)
);

CREATE TABLE TASK (
    ID_TASK INT NOT NULL AUTO_INCREMENT,
    DESCRIPTION_TASK VARCHAR(255),
    ID_ASSIGNING_TEACHER INT NOT NULL,
    ID_SUBJECT_FK INT NOT NULL,
    ID_COURSE_FK INT NOT NULL,
    PRIMARY KEY(ID_TASK),
    CONSTRAINT ASSIGNING_TEACHER_FK FOREIGN KEY(ID_ASSIGNING_TEACHER) REFERENCES TEACHER(ID_TEACHER),
    CONSTRAINT SUBJECT_TASK_FK FOREIGN KEY(ID_SUBJECT_FK) REFERENCES SUBJECT(ID_SUBJECT),
    CONSTRAINT COURSE_TASK_FK FOREIGN KEY(ID_COURSE_FK) REFERENCES COURSE(ID_COURSE)
);

INSERT INTO COURSE(LEVEL) VALUES 
    ("4I"),
    ("4A"),
    ("3I"),
    ("3A"),
    ("2I"),
    ("2A"),
    ("1I"),
    ("1A");

INSERT INTO STUDENT(RUT_STUDENT, NAME_STUDENT, LAST_NAME_STUDENT, ID_COURSE_FK) VALUES
    ("26269131-4", "BRAYAN ESTEBAN", "PERAFAN PADILLA", 1),
    ("12345678-K", "BENJAMIN", "TORRES", 1),
    ("12345678-K", "ROSANGEL ALEXANDRA", "ARISPE GUILLEN", 1),
    ("12345678-K", "KATYA SOFIA", "ZALAZAR", 2),
    ("12345678-K", "MILLARAY", "PUEBLA", 4),
    ("12345678-K", "CARLOS", "TORREJON", 5);

INSERT INTO TEACHER(RUT_TEACHER, NAME_TEACHER, LAST_NAME_TEACHER) VALUES
    ("12345678-K", "ADMIN", "ELADMIN"),
    ("12345678-K", "JUAN", "ARAUS"),
    ("12345678-K", "CARLOS", "VILLALOBOS"),
    ("12345678-K", "CRISTIAN", "HORMAZABAL"),
    ("12345678-K", "VICTOR", "CASTRO"),
    ("12345678-K", "JOSE", "OSORIO"),
    ("12345678-K", "MILLARAY", "NOSEMAS");

##Las comillas simples ´ son la convencion en SQL al insertar datos

INSERT INTO USER(USER_EMAIL, USER_PASSWORD, ID_STUDENT_FK, ID_TEACHER_FK) VALUES 
    ("ADMIN", "1234", null, 1),
    ("JUANARAUS@COMEDUC.CL","INSUCO2",NULL, 2),
    ("CRISTIANHORMAZABAL@COMEDUC.CL","INSUCO2",NULL, 4),
    ("MILLARAYNOSEMAS@COMEDUC.CL", "INSUCO2", NULL, 7),
    ("CARLOSVILLALOBOS@COMEDUC.CL", "INSUCO2", NULL, 3),
    ("VICTORCASTRO@COMEDUC.CL", "INSUCO2", NULL, 5),
    ("JOSEOSORIO@COMEDUC.CL", "INSUCO2", NULL, 6),
    ("BRAYANPERAFAN@INSUCODOS.CL", "INSUCO2", 1, NULL),
    ("BENJAMINTORRES@INSUCODOS.CL", "INSUCO2", 2, NULL),
    ("ROSANGELARISPE@INSUCODOS.CL", "INSUCO2", 3, NULL),
    ("KATYAZALAZAR@INSUCODOS.CL", "INSUCO2", 4, NULL),
    ("MILLARAYPUEBLA@INSUCODOS.CL", "INSUCO2", 5, NULL),
    ("CARLOSTORREJON@INSUCODOS.CL", "INSUCO2", 6, NULL);

SHOW TABLES;

DESCRIBE USER;

DESCRIBE STUDENT;

DESCRIBE TEACHER;

DESCRIBE SCHEDULE;

DESCRIBE SUBJECT;

DESCRIBE SPECIALITY;

DESCRIBE TASK;

DESCRIBE COURSE;

DESCRIBE ROOM;

